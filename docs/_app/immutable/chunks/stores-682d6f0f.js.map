{"version":3,"file":"stores-682d6f0f.js","sources":["../../../../../../node_modules/@sveltejs/kit/src/runtime/app/stores.js"],"sourcesContent":["import { getContext } from 'svelte';\nimport { browser } from './env.js';\nimport { stores as browser_stores } from '../client/singletons.js';\n\n// TODO remove this (for 1.0? after 1.0?)\nlet warned = false;\nexport function stores() {\n\tif (!warned) {\n\t\tconsole.error('stores() is deprecated; use getStores() instead');\n\t\twarned = true;\n\t}\n\treturn getStores();\n}\n\n/**\n * @type {import('$app/stores').getStores}\n */\nexport const getStores = () => {\n\tconst stores = browser ? browser_stores : getContext('__svelte__');\n\n\tconst readonly_stores = {\n\t\tpage: {\n\t\t\tsubscribe: stores.page.subscribe\n\t\t},\n\t\tnavigating: {\n\t\t\tsubscribe: stores.navigating.subscribe\n\t\t},\n\t\tupdated: stores.updated\n\t};\n\n\t// TODO remove this for 1.0\n\tObject.defineProperties(readonly_stores, {\n\t\tpreloading: {\n\t\t\tget() {\n\t\t\t\tconsole.error('stores.preloading is deprecated; use stores.navigating instead');\n\t\t\t\treturn {\n\t\t\t\t\tsubscribe: stores.navigating.subscribe\n\t\t\t\t};\n\t\t\t},\n\t\t\tenumerable: false\n\t\t},\n\t\tsession: {\n\t\t\tget() {\n\t\t\t\tremoved_session();\n\t\t\t\treturn {};\n\t\t\t},\n\t\t\tenumerable: false\n\t\t}\n\t});\n\n\treturn readonly_stores;\n};\n\n/** @type {typeof import('$app/stores').page} */\nexport const page = {\n\t/** @param {(value: any) => void} fn */\n\tsubscribe(fn) {\n\t\tconst store = getStores().page;\n\t\treturn store.subscribe(fn);\n\t}\n};\n\n/** @type {typeof import('$app/stores').navigating} */\nexport const navigating = {\n\tsubscribe(fn) {\n\t\tconst store = getStores().navigating;\n\t\treturn store.subscribe(fn);\n\t}\n};\n\nfunction removed_session() {\n\t// TODO remove for 1.0\n\tthrow new Error(\n\t\t'stores.session is no longer available. See https://github.com/sveltejs/kit/discussions/5883'\n\t);\n}\n\nexport const session = {\n\tsubscribe: removed_session,\n\tset: removed_session,\n\tupdate: removed_session\n};\n\n/** @type {typeof import('$app/stores').updated} */\nexport const updated = {\n\tsubscribe(fn) {\n\t\tconst store = getStores().updated;\n\n\t\tif (browser) {\n\t\t\tupdated.check = store.check;\n\t\t}\n\n\t\treturn store.subscribe(fn);\n\t},\n\tcheck: () => {\n\t\tthrow new Error(\n\t\t\tbrowser\n\t\t\t\t? `Cannot check updated store before subscribing`\n\t\t\t\t: `Can only check updated store in browser`\n\t\t);\n\t}\n};\n"],"names":["stores","browser_stores"],"mappings":";;AAiBO,MAAM,YAAY,MAAM;AAC9B,QAAMA,WAAmBC;AAEzB,QAAM,kBAAkB;AAAA,IACvB,MAAM;AAAA,MACL,WAAWD,SAAO,KAAK;AAAA,IACvB;AAAA,IACD,YAAY;AAAA,MACX,WAAWA,SAAO,WAAW;AAAA,IAC7B;AAAA,IACD,SAASA,SAAO;AAAA,EAClB;AAGC,SAAO,iBAAiB,iBAAiB;AAAA,IACxC,YAAY;AAAA,MACX,MAAM;AACL,gBAAQ,MAAM,gEAAgE;AAC9E,eAAO;AAAA,UACN,WAAWA,SAAO,WAAW;AAAA,QAClC;AAAA,MACI;AAAA,MACD,YAAY;AAAA,IACZ;AAAA,IACD,SAAS;AAAA,MACR,MAAM;AACL;AACA,eAAO;MACP;AAAA,MACD,YAAY;AAAA,IACZ;AAAA,EACH,CAAE;AAED,SAAO;AACR;AAGY,MAAC,OAAO;AAAA,EAEnB,UAAU,IAAI;AACb,UAAM,QAAQ,UAAW,EAAC;AAC1B,WAAO,MAAM,UAAU,EAAE;AAAA,EACzB;AACF;AAUA,SAAS,kBAAkB;AAE1B,QAAM,IAAI;AAAA,IACT;AAAA,EACF;AACA;"}