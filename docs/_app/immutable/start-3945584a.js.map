{"version":3,"mappings":"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","names":["location","error","hash","init","i","match","matchers","nodes","dictionary","ctx","stores","root","scroll","_a","e","navigation","base","parse"],"sources":["../../../../../node_modules/@sveltejs/kit/src/index/private.js","../../../../../node_modules/@sveltejs/kit/src/utils/error.js","../../../../../node_modules/@sveltejs/kit/src/utils/url.js","../../../../../node_modules/@sveltejs/kit/src/runtime/hash.js","../../../../../node_modules/@sveltejs/kit/src/runtime/client/fetcher.js","../../../../../node_modules/@sveltejs/kit/src/utils/routing.js","../../../../../node_modules/@sveltejs/kit/src/runtime/client/parse.js","../../../../../node_modules/@sveltejs/kit/src/index/index.js","../../../../generated/root.svelte","../../../../generated/client-matchers.js","../../../../generated/client-manifest.js","../../../../../node_modules/@sveltejs/kit/src/runtime/client/client.js","../../../../../node_modules/@sveltejs/kit/src/runtime/env-public.js","../../../../../node_modules/@sveltejs/kit/src/runtime/client/start.js"],"sourcesContent":["export class HttpError {\n\t// without these, things like `$page.error.stack` will error. we don't want to\n\t// include a stack for these sorts of errors, but we also don't want red\n\t// squigglies everywhere, so this feels like a not-terribile compromise\n\tname = 'HttpError';\n\n\t/** @type {void} */\n\tstack = undefined;\n\n\t/**\n\t * @param {number} status\n\t * @param {string | undefined} message\n\t */\n\tconstructor(status, message) {\n\t\tthis.status = status;\n\t\tthis.message = message ?? `Error: ${status}`;\n\t}\n\n\ttoString() {\n\t\treturn this.message;\n\t}\n}\n\nexport class Redirect {\n\t/**\n\t * @param {number} status\n\t * @param {string} location\n\t */\n\tconstructor(status, location) {\n\t\tthis.status = status;\n\t\tthis.location = location;\n\t}\n}\n","import { HttpError, Redirect } from '../index/private.js';\n\n/**\n * @param {unknown} err\n * @return {Error}\n */\nexport function coalesce_to_error(err) {\n\treturn err instanceof Error ||\n\t\t(err && /** @type {any} */ (err).name && /** @type {any} */ (err).message)\n\t\t? /** @type {Error} */ (err)\n\t\t: new Error(JSON.stringify(err));\n}\n\n/**\n * This is an identity function that exists to make TypeScript less\n * paranoid about people throwing things that aren't errors, which\n * frankly is not something we should care about\n * @param {unknown} error\n */\nexport function normalize_error(error) {\n\treturn /** @type {Redirect | HttpError | Error} */ (error);\n}\n","const absolute = /^([a-z]+:)?\\/?\\//;\nconst scheme = /^[a-z]+:/;\n\n/**\n * @param {string} base\n * @param {string} path\n */\nexport function resolve(base, path) {\n\tif (scheme.test(path)) return path;\n\n\tconst base_match = absolute.exec(base);\n\tconst path_match = absolute.exec(path);\n\n\tif (!base_match) {\n\t\tthrow new Error(`bad base path: \"${base}\"`);\n\t}\n\n\tconst baseparts = path_match ? [] : base.slice(base_match[0].length).split('/');\n\tconst pathparts = path_match ? path.slice(path_match[0].length).split('/') : path.split('/');\n\n\tbaseparts.pop();\n\n\tfor (let i = 0; i < pathparts.length; i += 1) {\n\t\tconst part = pathparts[i];\n\t\tif (part === '.') continue;\n\t\telse if (part === '..') baseparts.pop();\n\t\telse baseparts.push(part);\n\t}\n\n\tconst prefix = (path_match && path_match[0]) || (base_match && base_match[0]) || '';\n\n\treturn `${prefix}${baseparts.join('/')}`;\n}\n\n/** @param {string} path */\nexport function is_root_relative(path) {\n\treturn path[0] === '/' && path[1] !== '/';\n}\n\n/**\n * @param {string} path\n * @param {import('types').TrailingSlash} trailing_slash\n */\nexport function normalize_path(path, trailing_slash) {\n\tif (path === '/' || trailing_slash === 'ignore') return path;\n\n\tif (trailing_slash === 'never') {\n\t\treturn path.endsWith('/') ? path.slice(0, -1) : path;\n\t} else if (trailing_slash === 'always' && !path.endsWith('/')) {\n\t\treturn path + '/';\n\t}\n\n\treturn path;\n}\n\n/** @param {Record<string, string>} params */\nexport function decode_params(params) {\n\tfor (const key in params) {\n\t\t// input has already been decoded by decodeURI\n\t\t// now handle the rest that decodeURIComponent would do\n\t\tparams[key] = params[key]\n\t\t\t.replace(/%23/g, '#')\n\t\t\t.replace(/%3[Bb]/g, ';')\n\t\t\t.replace(/%2[Cc]/g, ',')\n\t\t\t.replace(/%2[Ff]/g, '/')\n\t\t\t.replace(/%3[Ff]/g, '?')\n\t\t\t.replace(/%3[Aa]/g, ':')\n\t\t\t.replace(/%40/g, '@')\n\t\t\t.replace(/%26/g, '&')\n\t\t\t.replace(/%3[Dd]/g, '=')\n\t\t\t.replace(/%2[Bb]/g, '+')\n\t\t\t.replace(/%24/g, '$');\n\t}\n\n\treturn params;\n}\n\nexport class LoadURL extends URL {\n\t/** @returns {string} */\n\tget hash() {\n\t\tthrow new Error(\n\t\t\t'url.hash is inaccessible from load. Consider accessing hash from the page store within the script tag of your component.'\n\t\t);\n\t}\n}\n\nexport class PrerenderingURL extends URL {\n\t/** @returns {string} */\n\tget search() {\n\t\tthrow new Error('Cannot access url.search on a page with prerendering enabled');\n\t}\n\n\t/** @returns {URLSearchParams} */\n\tget searchParams() {\n\t\tthrow new Error('Cannot access url.searchParams on a page with prerendering enabled');\n\t}\n}\n","/**\n * Hash using djb2\n * @param {import('types').StrictBody} value\n */\nexport function hash(value) {\n\tlet hash = 5381;\n\tlet i = value.length;\n\n\tif (typeof value === 'string') {\n\t\twhile (i) hash = (hash * 33) ^ value.charCodeAt(--i);\n\t} else {\n\t\twhile (i) hash = (hash * 33) ^ value[--i];\n\t}\n\n\treturn (hash >>> 0).toString(36);\n}\n","import { hash } from '../hash.js';\n\nlet loading = 0;\n\nexport const native_fetch = window.fetch;\n\nexport function lock_fetch() {\n\tloading += 1;\n}\n\nexport function unlock_fetch() {\n\tloading -= 1;\n}\n\nif (import.meta.env.DEV) {\n\tlet can_inspect_stack_trace = false;\n\n\tconst check_stack_trace = async () => {\n\t\tconst stack = /** @type {string} */ (new Error().stack);\n\t\tcan_inspect_stack_trace = stack.includes('check_stack_trace');\n\t};\n\n\tcheck_stack_trace();\n\n\twindow.fetch = (input, init) => {\n\t\tconst url = input instanceof Request ? input.url : input.toString();\n\t\tconst stack = /** @type {string} */ (new Error().stack);\n\n\t\tconst heuristic = can_inspect_stack_trace ? stack.includes('load_node') : loading;\n\t\tif (heuristic) {\n\t\t\tconsole.warn(\n\t\t\t\t`Loading ${url} using \\`window.fetch\\`. For best results, use the \\`fetch\\` that is passed to your \\`load\\` function: https://kit.svelte.dev/docs/load#input-fetch`\n\t\t\t);\n\t\t}\n\n\t\treturn native_fetch(input, init);\n\t};\n}\n\n/**\n * @param {RequestInfo} resource\n * @param {RequestInit} [opts]\n */\nexport function initial_fetch(resource, opts) {\n\tconst url = JSON.stringify(typeof resource === 'string' ? resource : resource.url);\n\n\tlet selector = `script[sveltekit\\\\:data-type=\"data\"][sveltekit\\\\:data-url=${url}]`;\n\n\tif (opts && typeof opts.body === 'string') {\n\t\tselector += `[sveltekit\\\\:data-body=\"${hash(opts.body)}\"]`;\n\t}\n\n\tconst script = document.querySelector(selector);\n\tif (script && script.textContent) {\n\t\tconst { body, ...init } = JSON.parse(script.textContent);\n\t\treturn Promise.resolve(new Response(body, init));\n\t}\n\n\treturn native_fetch(resource, opts);\n}\n","const param_pattern = /^(\\.\\.\\.)?(\\w+)(?:=(\\w+))?$/;\n\n/** @param {string} id */\nexport function parse_route_id(id) {\n\t/** @type {string[]} */\n\tconst names = [];\n\n\t/** @type {string[]} */\n\tconst types = [];\n\n\t// `/foo` should get an optional trailing slash, `/foo.json` should not\n\t// const add_trailing_slash = !/\\.[a-z]+$/.test(key);\n\tlet add_trailing_slash = true;\n\n\tconst pattern =\n\t\tid === ''\n\t\t\t? /^\\/$/\n\t\t\t: new RegExp(\n\t\t\t\t\t`^${id\n\t\t\t\t\t\t.split(/(?:@[a-zA-Z0-9_-]+)?(?:\\/|$)/)\n\t\t\t\t\t\t.map((segment, i, segments) => {\n\t\t\t\t\t\t\tconst decoded_segment = decodeURIComponent(segment);\n\t\t\t\t\t\t\t// special case — /[...rest]/ could contain zero segments\n\t\t\t\t\t\t\tconst match = /^\\[\\.\\.\\.(\\w+)(?:=(\\w+))?\\]$/.exec(decoded_segment);\n\t\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\t\tnames.push(match[1]);\n\t\t\t\t\t\t\t\ttypes.push(match[2]);\n\t\t\t\t\t\t\t\treturn '(?:/(.*))?';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst is_last = i === segments.length - 1;\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\tdecoded_segment &&\n\t\t\t\t\t\t\t\t'/' +\n\t\t\t\t\t\t\t\t\tdecoded_segment\n\t\t\t\t\t\t\t\t\t\t.split(/\\[(.+?)\\]/)\n\t\t\t\t\t\t\t\t\t\t.map((content, i) => {\n\t\t\t\t\t\t\t\t\t\t\tif (i % 2) {\n\t\t\t\t\t\t\t\t\t\t\t\tconst match = param_pattern.exec(content);\n\t\t\t\t\t\t\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Invalid param: ${content}. Params and matcher names can only have underscores and alphanumeric characters.`\n\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tconst [, rest, name, type] = match;\n\t\t\t\t\t\t\t\t\t\t\t\tnames.push(name);\n\t\t\t\t\t\t\t\t\t\t\t\ttypes.push(type);\n\t\t\t\t\t\t\t\t\t\t\t\treturn rest ? '(.*?)' : '([^/]+?)';\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\tif (is_last && content.includes('.')) add_trailing_slash = false;\n\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\tcontent // allow users to specify characters on the file system in an encoded manner\n\t\t\t\t\t\t\t\t\t\t\t\t\t.normalize()\n\t\t\t\t\t\t\t\t\t\t\t\t\t// We use [ and ] to denote parameters, so users must encode these on the file\n\t\t\t\t\t\t\t\t\t\t\t\t\t// system to match against them. We don't decode all characters since others\n\t\t\t\t\t\t\t\t\t\t\t\t\t// can already be epressed and so that '%' can be easily used directly in filenames\n\t\t\t\t\t\t\t\t\t\t\t\t\t.replace(/%5[Bb]/g, '[')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.replace(/%5[Dd]/g, ']')\n\t\t\t\t\t\t\t\t\t\t\t\t\t// '#', '/', and '?' can only appear in URL path segments in an encoded manner.\n\t\t\t\t\t\t\t\t\t\t\t\t\t// They will not be touched by decodeURI so need to be encoded here, so\n\t\t\t\t\t\t\t\t\t\t\t\t\t// that we can match against them.\n\t\t\t\t\t\t\t\t\t\t\t\t\t// We skip '/' since you can't create a file with it on any OS\n\t\t\t\t\t\t\t\t\t\t\t\t\t.replace(/#/g, '%23')\n\t\t\t\t\t\t\t\t\t\t\t\t\t.replace(/\\?/g, '%3F')\n\t\t\t\t\t\t\t\t\t\t\t\t\t// escape characters that have special meaning in regex\n\t\t\t\t\t\t\t\t\t\t\t\t\t.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n\t\t\t\t\t\t\t\t\t\t\t); // TODO handle encoding\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t.join('')\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.join('')}${add_trailing_slash ? '/?' : ''}$`\n\t\t\t  );\n\n\treturn { pattern, names, types };\n}\n\n/**\n * @param {RegExpMatchArray} match\n * @param {string[]} names\n * @param {string[]} types\n * @param {Record<string, import('types').ParamMatcher>} matchers\n */\nexport function exec(match, names, types, matchers) {\n\t/** @type {Record<string, string>} */\n\tconst params = {};\n\n\tfor (let i = 0; i < names.length; i += 1) {\n\t\tconst name = names[i];\n\t\tconst type = types[i];\n\t\tconst value = match[i + 1] || '';\n\n\t\tif (type) {\n\t\t\tconst matcher = matchers[type];\n\t\t\tif (!matcher) throw new Error(`Missing \"${type}\" param matcher`); // TODO do this ahead of time?\n\n\t\t\tif (!matcher(value)) return;\n\t\t}\n\n\t\tparams[name] = value;\n\t}\n\n\treturn params;\n}\n","import { exec, parse_route_id } from '../../utils/routing.js';\n\n/**\n * @param {import('types').CSRPageNodeLoader[]} nodes\n * @param {Record<string, [number[], number[], number, 1?]>} dictionary\n * @param {Record<string, (param: string) => boolean>} matchers\n * @returns {import('types').CSRRoute[]}\n */\nexport function parse(nodes, dictionary, matchers) {\n\treturn Object.entries(dictionary).map(([id, [errors, layouts, leaf, uses_server_data]]) => {\n\t\tconst { pattern, names, types } = parse_route_id(id);\n\n\t\tconst route = {\n\t\t\tid,\n\t\t\t/** @param {string} path */\n\t\t\texec: (path) => {\n\t\t\t\tconst match = pattern.exec(path);\n\t\t\t\tif (match) return exec(match, names, types, matchers);\n\t\t\t},\n\t\t\terrors: errors.map((n) => nodes[n]),\n\t\t\tlayouts: layouts.map((n) => nodes[n]),\n\t\t\tleaf: nodes[leaf],\n\t\t\tuses_server_data: !!uses_server_data\n\t\t};\n\n\t\t// bit of a hack, but ensures that layout/error node lists are the same\n\t\t// length, without which the wrong data will be applied if the route\n\t\t// manifest looks like `[[a, b], [c,], d]`\n\t\troute.errors.length = route.layouts.length = Math.max(\n\t\t\troute.errors.length,\n\t\t\troute.layouts.length\n\t\t);\n\n\t\treturn route;\n\t});\n}\n","import { HttpError, Redirect } from './private.js';\n\n/**\n * Creates an `HttpError` object with an HTTP status code and an optional message.\n * This object, if thrown during request handling, will cause SvelteKit to\n * return an error response without invoking `handleError`\n * @param {number} status\n * @param {string | undefined} [message]\n */\nexport function error(status, message) {\n\treturn new HttpError(status, message);\n}\n\n/**\n * Creates a `Redirect` object. If thrown during request handling, SvelteKit will\n * return a redirect response.\n * @param {number} status\n * @param {string} location\n */\nexport function redirect(status, location) {\n\tif (isNaN(status) || status < 300 || status > 399) {\n\t\tthrow new Error('Invalid status code');\n\t}\n\n\treturn new Redirect(status, location);\n}\n\n/**\n * Generates a JSON `Response` object from the supplied data.\n * @param {any} data\n * @param {ResponseInit} [init]\n */\nexport function json(data, init) {\n\t// TODO deprecate this in favour of `Response.json` when it's\n\t// more widely supported\n\tconst headers = new Headers(init?.headers);\n\tif (!headers.has('content-type')) {\n\t\theaders.set('content-type', 'application/json');\n\t}\n\n\treturn new Response(JSON.stringify(data), {\n\t\t...init,\n\t\theaders\n\t});\n}\n","<!-- This file is generated by @sveltejs/kit — do not edit it! -->\n<script>\n\timport { setContext, afterUpdate, onMount } from 'svelte';\n\timport { browser } from '$app/env';\n\n\t// stores\n\texport let stores;\n\texport let page;\n\n\texport let components;\n\texport let data_0 = null;\n\texport let data_1 = null;\n\texport let data_2 = null;\n\texport let errors;\n\n\tif (!browser) {\n\t\tsetContext('__svelte__', stores);\n\t}\n\n\t$: stores.page.set(page);\n\tafterUpdate(stores.page.notify);\n\n\tlet mounted = false;\n\tlet navigated = false;\n\tlet title = null;\n\n\tonMount(() => {\n\t\tconst unsubscribe = stores.page.subscribe(() => {\n\t\t\tif (mounted) {\n\t\t\t\tnavigated = true;\n\t\t\t\ttitle = document.title || 'untitled page';\n\t\t\t}\n\t\t});\n\n\t\tmounted = true;\n\t\treturn unsubscribe;\n\t});\n</script>\n\n{#if components[1]}\n\t<svelte:component this={components[0]} data={data_0}>\n\t\t{#if components[2]}\n\t\t\t<svelte:component this={components[1]} data={data_1}>\n\t\t\t\t<svelte:component this={components[2]} data={data_2}/>\n\t\t\t</svelte:component>\n\t\t{:else}\n\t\t\t<svelte:component this={components[1]} data={data_1} {errors} />\n\t\t{/if}\n\t</svelte:component>\n{:else}\n\t<svelte:component this={components[0]} data={data_0} {errors} />\n{/if}\n\n{#if mounted}\n\t<div id=\"svelte-announcer\" aria-live=\"assertive\" aria-atomic=\"true\" style=\"position: absolute; left: 0; top: 0; clip: rect(0 0 0 0); clip-path: inset(50%); overflow: hidden; white-space: nowrap; width: 1px; height: 1px\">\n\t\t{#if navigated}\n\t\t\t{title}\n\t\t{/if}\n\t</div>\n{/if}","export const matchers = {};","export { matchers } from './client-matchers.js';\n\nexport const nodes = [\n\t() => import('./nodes/0'),\n\t() => import('./nodes/1'),\n\t() => import('./nodes/2'),\n\t() => import('./nodes/3'),\n\t() => import('./nodes/4')\n];\n\nexport const dictionary = {\n\t\"\": [[1], [0], 2],\n\t\"about\": [[1], [0], 3],\n\t\"todos\": [[1], [0], 4, 1]\n};","import { onMount, tick } from 'svelte';\nimport { normalize_error } from '../../utils/error.js';\nimport { LoadURL, decode_params, normalize_path } from '../../utils/url.js';\nimport { find_anchor, get_base_uri, get_href, scroll_state } from './utils.js';\nimport { lock_fetch, unlock_fetch, initial_fetch, native_fetch } from './fetcher.js';\nimport { parse } from './parse.js';\nimport { error } from '../../index/index.js';\n\nimport Root from '__GENERATED__/root.svelte';\nimport { nodes, dictionary, matchers } from '__GENERATED__/client-manifest.js';\nimport { HttpError, Redirect } from '../../index/private.js';\nimport { stores } from './singletons.js';\n\nconst SCROLL_KEY = 'sveltekit:scroll';\nconst INDEX_KEY = 'sveltekit:index';\n\nconst routes = parse(nodes, dictionary, matchers);\n\n// we import the root layout/error nodes eagerly, so that\n// connectivity errors after initialisation don't nuke the app\nconst default_layout = nodes[0]();\nconst default_error = nodes[1]();\n\n// We track the scroll position associated with each history entry in sessionStorage,\n// rather than on history.state itself, because when navigation is driven by\n// popstate it's too late to update the scroll position associated with the\n// state we're navigating from\n\n/** @typedef {{ x: number, y: number }} ScrollPosition */\n/** @type {Record<number, ScrollPosition>} */\nlet scroll_positions = {};\ntry {\n\tscroll_positions = JSON.parse(sessionStorage[SCROLL_KEY]);\n} catch {\n\t// do nothing\n}\n\n/** @param {number} index */\nfunction update_scroll_positions(index) {\n\tscroll_positions[index] = scroll_state();\n}\n\n/**\n * @param {{\n *   target: Element;\n *   base: string;\n *   trailing_slash: import('types').TrailingSlash;\n * }} opts\n * @returns {import('./types').Client}\n */\nexport function create_client({ target, base, trailing_slash }) {\n\t/** @type {Array<((href: string) => boolean)>} */\n\tconst invalidated = [];\n\n\t/** @type {{id: string | null, promise: Promise<import('./types').NavigationResult | undefined> | null}} */\n\tconst load_cache = {\n\t\tid: null,\n\t\tpromise: null\n\t};\n\n\tconst callbacks = {\n\t\t/** @type {Array<(opts: { from: URL, to: URL | null, cancel: () => void }) => void>} */\n\t\tbefore_navigate: [],\n\n\t\t/** @type {Array<(opts: { from: URL | null, to: URL }) => void>} */\n\t\tafter_navigate: []\n\t};\n\n\t/** @type {import('./types').NavigationState} */\n\tlet current = {\n\t\tbranch: [],\n\t\terror: null,\n\t\tsession_id: 0,\n\t\t// @ts-ignore - we need the initial value to be null\n\t\turl: null\n\t};\n\n\tlet started = false;\n\tlet autoscroll = true;\n\tlet updating = false;\n\tlet session_id = 1;\n\n\t/** @type {Promise<void> | null} */\n\tlet invalidating = null;\n\n\t/** @type {import('svelte').SvelteComponent} */\n\tlet root;\n\n\tlet router_enabled = true;\n\n\t// keeping track of the history index in order to prevent popstate navigation events if needed\n\tlet current_history_index = history.state?.[INDEX_KEY];\n\n\tif (!current_history_index) {\n\t\t// we use Date.now() as an offset so that cross-document navigations\n\t\t// within the app don't result in data loss\n\t\tcurrent_history_index = Date.now();\n\n\t\t// create initial history entry, so we can return here\n\t\thistory.replaceState(\n\t\t\t{ ...history.state, [INDEX_KEY]: current_history_index },\n\t\t\t'',\n\t\t\tlocation.href\n\t\t);\n\t}\n\n\t// if we reload the page, or Cmd-Shift-T back to it,\n\t// recover scroll position\n\tconst scroll = scroll_positions[current_history_index];\n\tif (scroll) {\n\t\thistory.scrollRestoration = 'manual';\n\t\tscrollTo(scroll.x, scroll.y);\n\t}\n\n\tlet hash_navigating = false;\n\n\t/** @type {import('types').Page} */\n\tlet page;\n\n\t/** @type {{}} */\n\tlet token;\n\n\t/**\n\t * @param {string | URL} url\n\t * @param {{ noscroll?: boolean; replaceState?: boolean; keepfocus?: boolean; state?: any }} opts\n\t * @param {string[]} redirect_chain\n\t */\n\tasync function goto(\n\t\turl,\n\t\t{ noscroll = false, replaceState = false, keepfocus = false, state = {} },\n\t\tredirect_chain\n\t) {\n\t\tif (typeof url === 'string') {\n\t\t\turl = new URL(url, get_base_uri(document));\n\t\t}\n\n\t\tif (router_enabled) {\n\t\t\treturn navigate({\n\t\t\t\turl,\n\t\t\t\tscroll: noscroll ? scroll_state() : null,\n\t\t\t\tkeepfocus,\n\t\t\t\tredirect_chain,\n\t\t\t\tdetails: {\n\t\t\t\t\tstate,\n\t\t\t\t\treplaceState\n\t\t\t\t},\n\t\t\t\taccepted: () => {},\n\t\t\t\tblocked: () => {}\n\t\t\t});\n\t\t}\n\n\t\tawait native_navigation(url);\n\t}\n\n\t/** @param {URL} url */\n\tasync function prefetch(url) {\n\t\tconst intent = get_navigation_intent(url);\n\n\t\tif (!intent) {\n\t\t\tthrow new Error('Attempted to prefetch a URL that does not belong to this app');\n\t\t}\n\n\t\tload_cache.promise = load_route(intent);\n\t\tload_cache.id = intent.id;\n\n\t\treturn load_cache.promise;\n\t}\n\n\t/**\n\t * Returns `true` if update completes, `false` if it is aborted\n\t * @param {URL} url\n\t * @param {string[]} redirect_chain\n\t * @param {{hash?: string, scroll: { x: number, y: number } | null, keepfocus: boolean, details: { replaceState: boolean, state: any } | null}} [opts]\n\t * @param {() => void} [callback]\n\t */\n\tasync function update(url, redirect_chain, opts, callback) {\n\t\tconst intent = get_navigation_intent(url);\n\n\t\tconst current_token = (token = {});\n\t\tlet navigation_result = intent && (await load_route(intent));\n\n\t\tif (\n\t\t\t!navigation_result &&\n\t\t\turl.origin === location.origin &&\n\t\t\turl.pathname === location.pathname\n\t\t) {\n\t\t\t// this could happen in SPA fallback mode if the user navigated to\n\t\t\t// `/non-existent-page`. if we fall back to reloading the page, it\n\t\t\t// will create an infinite loop. so whereas we normally handle\n\t\t\t// unknown routes by going to the server, in this special case\n\t\t\t// we render a client-side error page instead\n\t\t\tnavigation_result = await load_root_error_page({\n\t\t\t\tstatus: 404,\n\t\t\t\terror: new Error(`Not found: ${url.pathname}`),\n\t\t\t\turl,\n\t\t\t\trouteId: null\n\t\t\t});\n\t\t}\n\n\t\tif (!navigation_result) {\n\t\t\tawait native_navigation(url);\n\t\t\treturn false; // unnecessary, but TypeScript prefers it this way\n\t\t}\n\n\t\t// if this is an internal navigation intent, use the normalized\n\t\t// URL for the rest of the function\n\t\turl = intent?.url || url;\n\n\t\t// abort if user navigated during update\n\t\tif (token !== current_token) return false;\n\n\t\tinvalidated.length = 0;\n\n\t\tif (navigation_result.type === 'redirect') {\n\t\t\tif (redirect_chain.length > 10 || redirect_chain.includes(url.pathname)) {\n\t\t\t\tnavigation_result = await load_root_error_page({\n\t\t\t\t\tstatus: 500,\n\t\t\t\t\terror: new Error('Redirect loop'),\n\t\t\t\t\turl,\n\t\t\t\t\trouteId: null\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (router_enabled) {\n\t\t\t\t\tgoto(new URL(navigation_result.location, url).href, {}, [\n\t\t\t\t\t\t...redirect_chain,\n\t\t\t\t\t\turl.pathname\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tawait native_navigation(new URL(navigation_result.location, location.href));\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (navigation_result.props?.page?.status >= 400) {\n\t\t\tconst updated = await stores.updated.check();\n\t\t\tif (updated) {\n\t\t\t\tawait native_navigation(url);\n\t\t\t}\n\t\t}\n\n\t\tupdating = true;\n\n\t\tif (opts && opts.details) {\n\t\t\tconst { details } = opts;\n\t\t\tconst change = details.replaceState ? 0 : 1;\n\t\t\tdetails.state[INDEX_KEY] = current_history_index += change;\n\t\t\thistory[details.replaceState ? 'replaceState' : 'pushState'](details.state, '', url);\n\t\t}\n\n\t\tif (started) {\n\t\t\tcurrent = navigation_result.state;\n\n\t\t\tif (navigation_result.props.page) {\n\t\t\t\tnavigation_result.props.page.url = url;\n\t\t\t}\n\n\t\t\tif (import.meta.env.DEV) {\n\t\t\t\t// Nasty hack to silence harmless warnings the user can do nothing about\n\t\t\t\tconst warn = console.warn;\n\t\t\t\tconsole.warn = (...args) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\targs.length !== 1 ||\n\t\t\t\t\t\t!/<(Layout|Page)(_[\\w$]+)?> was created with unknown prop '(data|errors)'/.test(args[0])\n\t\t\t\t\t) {\n\t\t\t\t\t\twarn(...args);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\troot.$set(navigation_result.props);\n\t\t\t\ttick().then(() => (console.warn = warn));\n\t\t\t} else {\n\t\t\t\troot.$set(navigation_result.props);\n\t\t\t}\n\t\t} else {\n\t\t\tinitialize(navigation_result);\n\t\t}\n\n\t\t// opts must be passed if we're navigating\n\t\tif (opts) {\n\t\t\tconst { scroll, keepfocus } = opts;\n\n\t\t\tif (!keepfocus) {\n\t\t\t\t// Reset page selection and focus\n\t\t\t\t// We try to mimic browsers' behaviour as closely as possible by targeting the\n\t\t\t\t// first scrollable region, but unfortunately it's not a perfect match — e.g.\n\t\t\t\t// shift-tabbing won't immediately cycle up from the end of the page on Chromium\n\t\t\t\t// See https://html.spec.whatwg.org/multipage/interaction.html#get-the-focusable-area\n\t\t\t\tconst root = document.body;\n\t\t\t\tconst tabindex = root.getAttribute('tabindex');\n\n\t\t\t\troot.tabIndex = -1;\n\t\t\t\troot.focus({ preventScroll: true });\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tgetSelection()?.removeAllRanges();\n\t\t\t\t});\n\n\t\t\t\t// restore `tabindex` as to prevent `root` from stealing input from elements\n\t\t\t\tif (tabindex !== null) {\n\t\t\t\t\troot.setAttribute('tabindex', tabindex);\n\t\t\t\t} else {\n\t\t\t\t\troot.removeAttribute('tabindex');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// need to render the DOM before we can scroll to the rendered elements\n\t\t\tawait tick();\n\n\t\t\tif (autoscroll) {\n\t\t\t\tconst deep_linked = url.hash && document.getElementById(url.hash.slice(1));\n\t\t\t\tif (scroll) {\n\t\t\t\t\tscrollTo(scroll.x, scroll.y);\n\t\t\t\t} else if (deep_linked) {\n\t\t\t\t\t// Here we use `scrollIntoView` on the element instead of `scrollTo`\n\t\t\t\t\t// because it natively supports the `scroll-margin` and `scroll-behavior`\n\t\t\t\t\t// CSS properties.\n\t\t\t\t\tdeep_linked.scrollIntoView();\n\t\t\t\t} else {\n\t\t\t\t\tscrollTo(0, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// in this case we're simply invalidating\n\t\t\tawait tick();\n\t\t}\n\n\t\tload_cache.promise = null;\n\t\tload_cache.id = null;\n\t\tautoscroll = true;\n\n\t\tif (navigation_result.props.page) {\n\t\t\tpage = navigation_result.props.page;\n\t\t}\n\n\t\tconst leaf_node = navigation_result.state.branch[navigation_result.state.branch.length - 1];\n\t\trouter_enabled = leaf_node?.node.shared?.router !== false;\n\n\t\tif (callback) callback();\n\n\t\tupdating = false;\n\t}\n\n\t/** @param {import('./types').NavigationFinished} result */\n\tfunction initialize(result) {\n\t\tcurrent = result.state;\n\n\t\tconst style = document.querySelector('style[data-sveltekit]');\n\t\tif (style) style.remove();\n\n\t\tpage = result.props.page;\n\n\t\tif (import.meta.env.DEV) {\n\t\t\t// Nasty hack to silence harmless warnings the user can do nothing about\n\t\t\tconst warn = console.warn;\n\t\t\tconsole.warn = (...args) => {\n\t\t\t\tif (\n\t\t\t\t\targs.length !== 1 ||\n\t\t\t\t\t!/<(Layout|Page)(_[\\w$]+)?> was created with unknown prop '(data|errors)'/.test(args[0])\n\t\t\t\t) {\n\t\t\t\t\twarn(...args);\n\t\t\t\t}\n\t\t\t};\n\t\t\troot = new Root({\n\t\t\t\ttarget,\n\t\t\t\tprops: { ...result.props, stores },\n\t\t\t\thydrate: true\n\t\t\t});\n\t\t\tconsole.warn = warn;\n\t\t} else {\n\t\t\troot = new Root({\n\t\t\t\ttarget,\n\t\t\t\tprops: { ...result.props, stores },\n\t\t\t\thydrate: true\n\t\t\t});\n\t\t}\n\n\t\tif (router_enabled) {\n\t\t\tconst navigation = { from: null, to: new URL(location.href) };\n\t\t\tcallbacks.after_navigate.forEach((fn) => fn(navigation));\n\t\t}\n\n\t\tstarted = true;\n\t}\n\n\t/**\n\t *\n\t * @param {{\n\t *   url: URL;\n\t *   params: Record<string, string>;\n\t *   branch: Array<import('./types').BranchNode | undefined>;\n\t *   status: number;\n\t *   error: HttpError | Error | null;\n\t *   routeId: string | null;\n\t *   validation_errors?: string | undefined;\n\t * }} opts\n\t */\n\tasync function get_navigation_result_from_branch({\n\t\turl,\n\t\tparams,\n\t\tbranch,\n\t\tstatus,\n\t\terror,\n\t\trouteId,\n\t\tvalidation_errors\n\t}) {\n\t\tconst filtered = /** @type {import('./types').BranchNode[] } */ (branch.filter(Boolean));\n\n\t\t/** @type {import('./types').NavigationFinished} */\n\t\tconst result = {\n\t\t\ttype: 'loaded',\n\t\t\tstate: {\n\t\t\t\turl,\n\t\t\t\tparams,\n\t\t\t\tbranch,\n\t\t\t\terror,\n\t\t\t\tsession_id\n\t\t\t},\n\t\t\tprops: {\n\t\t\t\tcomponents: filtered.map((branch_node) => branch_node.node.component),\n\t\t\t\terrors: validation_errors\n\t\t\t}\n\t\t};\n\n\t\tlet data = {};\n\t\tlet data_changed = false;\n\t\tfor (let i = 0; i < filtered.length; i += 1) {\n\t\t\tdata = { ...data, ...filtered[i].data };\n\t\t\t// Only set props if the node actually updated. This prevents needless rerenders.\n\t\t\tif (data_changed || !current.branch.some((node) => node === filtered[i])) {\n\t\t\t\tresult.props[`data_${i}`] = data;\n\t\t\t\tdata_changed = true;\n\t\t\t}\n\t\t}\n\n\t\tconst page_changed =\n\t\t\t!current.url || url.href !== current.url.href || current.error !== error || data_changed;\n\n\t\tif (page_changed) {\n\t\t\tresult.props.page = { error, params, routeId, status, url, data };\n\n\t\t\t// TODO remove this for 1.0\n\t\t\t/**\n\t\t\t * @param {string} property\n\t\t\t * @param {string} replacement\n\t\t\t */\n\t\t\tconst print_error = (property, replacement) => {\n\t\t\t\tObject.defineProperty(result.props.page, property, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\tthrow new Error(`$page.${property} has been replaced by $page.url.${replacement}`);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tprint_error('origin', 'origin');\n\t\t\tprint_error('path', 'pathname');\n\t\t\tprint_error('query', 'searchParams');\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Call the load function of the given node, if it exists.\n\t * If `server_data` is passed, this is treated as the initial run and the page endpoint is not requested.\n\t *\n\t * @param {{\n\t *   node: import('types').CSRPageNode;\n\t * \t parent: () => Promise<Record<string, any>>;\n\t *   url: URL;\n\t *   params: Record<string, string>;\n\t *   routeId: string | null;\n\t * \t server_data: Record<string, any> | null;\n\t * }} options\n\t * @returns {Promise<import('./types').BranchNode>}\n\t */\n\tasync function load_node({ node, parent, url, params, routeId, server_data }) {\n\t\tconst uses = {\n\t\t\tparams: new Set(),\n\t\t\turl: false,\n\t\t\tdependencies: new Set(),\n\t\t\tparent: false\n\t\t};\n\n\t\t/** @param {string[]} deps */\n\t\tfunction depends(...deps) {\n\t\t\tfor (const dep of deps) {\n\t\t\t\tconst { href } = new URL(dep, url);\n\t\t\t\tuses.dependencies.add(href);\n\t\t\t}\n\t\t}\n\n\t\t/** @type {Record<string, any> | null} */\n\t\tlet data = null;\n\n\t\tif (node.server) {\n\t\t\t// +page|layout.server.js data means we need to mark this URL as a dependency of itself,\n\t\t\t// unless we want to get clever with usage detection on the server, which could\n\t\t\t// be returned to the client either as payload or custom headers\n\t\t\tuses.dependencies.add(url.href);\n\t\t\tuses.url = true;\n\t\t}\n\n\t\t/** @type {Record<string, string>} */\n\t\tconst uses_params = {};\n\t\tfor (const key in params) {\n\t\t\tObject.defineProperty(uses_params, key, {\n\t\t\t\tget() {\n\t\t\t\t\tuses.params.add(key);\n\t\t\t\t\treturn params[key];\n\t\t\t\t},\n\t\t\t\tenumerable: true\n\t\t\t});\n\t\t}\n\n\t\tconst load_url = new LoadURL(url);\n\n\t\tif (node.shared?.load) {\n\t\t\t/** @type {import('types').LoadEvent} */\n\t\t\tconst load_input = {\n\t\t\t\trouteId,\n\t\t\t\tparams: uses_params,\n\t\t\t\tdata: server_data,\n\t\t\t\tget url() {\n\t\t\t\t\tuses.url = true;\n\t\t\t\t\treturn load_url;\n\t\t\t\t},\n\t\t\t\tasync fetch(resource, init) {\n\t\t\t\t\tlet requested;\n\n\t\t\t\t\tif (typeof resource === 'string') {\n\t\t\t\t\t\trequested = resource;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trequested = resource.url;\n\n\t\t\t\t\t\t// we're not allowed to modify the received `Request` object, so in order\n\t\t\t\t\t\t// to fixup relative urls we create a new equivalent `init` object instead\n\t\t\t\t\t\tinit = {\n\t\t\t\t\t\t\t// the request body must be consumed in memory until browsers\n\t\t\t\t\t\t\t// implement streaming request bodies and/or the body getter\n\t\t\t\t\t\t\tbody:\n\t\t\t\t\t\t\t\tresource.method === 'GET' || resource.method === 'HEAD'\n\t\t\t\t\t\t\t\t\t? undefined\n\t\t\t\t\t\t\t\t\t: await resource.blob(),\n\t\t\t\t\t\t\tcache: resource.cache,\n\t\t\t\t\t\t\tcredentials: resource.credentials,\n\t\t\t\t\t\t\theaders: resource.headers,\n\t\t\t\t\t\t\tintegrity: resource.integrity,\n\t\t\t\t\t\t\tkeepalive: resource.keepalive,\n\t\t\t\t\t\t\tmethod: resource.method,\n\t\t\t\t\t\t\tmode: resource.mode,\n\t\t\t\t\t\t\tredirect: resource.redirect,\n\t\t\t\t\t\t\treferrer: resource.referrer,\n\t\t\t\t\t\t\treferrerPolicy: resource.referrerPolicy,\n\t\t\t\t\t\t\tsignal: resource.signal,\n\t\t\t\t\t\t\t...init\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\t// we must fixup relative urls so they are resolved from the target page\n\t\t\t\t\tconst normalized = new URL(requested, url).href;\n\t\t\t\t\tdepends(normalized);\n\n\t\t\t\t\t// prerendered pages may be served from any origin, so `initial_fetch` urls shouldn't be normalized\n\t\t\t\t\treturn started ? native_fetch(normalized, init) : initial_fetch(requested, init);\n\t\t\t\t},\n\t\t\t\tsetHeaders: () => {}, // noop\n\t\t\t\tdepends,\n\t\t\t\tget parent() {\n\t\t\t\t\t// uses.parent assignment here, not on method inokation, else we wouldn't notice when someone\n\t\t\t\t\t// does await parent() inside an if branch which wasn't executed yet.\n\t\t\t\t\tuses.parent = true;\n\t\t\t\t\treturn parent;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// TODO remove this for 1.0\n\t\t\tObject.defineProperties(load_input, {\n\t\t\t\tprops: {\n\t\t\t\t\tget() {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'@migration task: Replace `props` with `data` stuff https://github.com/sveltejs/kit/discussions/5774#discussioncomment-3292693'\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: false\n\t\t\t\t},\n\t\t\t\tsession: {\n\t\t\t\t\tget() {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'session is no longer available. See https://github.com/sveltejs/kit/discussions/5883'\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: false\n\t\t\t\t},\n\t\t\t\tstuff: {\n\t\t\t\t\tget() {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'@migration task: Remove stuff https://github.com/sveltejs/kit/discussions/5774#discussioncomment-3292693'\n\t\t\t\t\t\t);\n\t\t\t\t\t},\n\t\t\t\t\tenumerable: false\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (import.meta.env.DEV) {\n\t\t\t\ttry {\n\t\t\t\t\tlock_fetch();\n\t\t\t\t\tdata = (await node.shared.load.call(null, load_input)) ?? null;\n\t\t\t\t} finally {\n\t\t\t\t\tunlock_fetch();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdata = (await node.shared.load.call(null, load_input)) ?? null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tnode,\n\t\t\tdata: data || server_data,\n\t\t\tuses\n\t\t};\n\t}\n\n\t/**\n\t * @param {import('./types').NavigationIntent} intent\n\t * @returns {Promise<import('./types').NavigationResult | undefined>}\n\t */\n\tasync function load_route({ id, url, params, route }) {\n\t\tif (load_cache.id === id && load_cache.promise) {\n\t\t\treturn load_cache.promise;\n\t\t}\n\n\t\tconst { errors, layouts, leaf } = route;\n\n\t\tconst changed = current.url && {\n\t\t\turl: id !== current.url.pathname + current.url.search,\n\t\t\tparams: Object.keys(params).filter((key) => current.params[key] !== params[key])\n\t\t};\n\n\t\t// preload modules to avoid waterfall, but handle rejections\n\t\t// so they don't get reported to Sentry et al (we don't need\n\t\t// to act on the failures at this point)\n\t\t[...errors, ...layouts, leaf].forEach((loader) => loader?.().catch(() => {}));\n\n\t\tconst nodes = [...layouts, leaf];\n\n\t\t// To avoid waterfalls when someone awaits a parent, compute as much as possible here already\n\t\t/** @type {boolean[]} */\n\t\tconst nodes_changed_since_last_render = [];\n\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\tif (!nodes[i]) {\n\t\t\t\tnodes_changed_since_last_render.push(false);\n\t\t\t} else {\n\t\t\t\tconst previous = current.branch[i];\n\t\t\t\tconst changed_since_last_render =\n\t\t\t\t\t!previous ||\n\t\t\t\t\t(changed.url && previous.uses.url) ||\n\t\t\t\t\tchanged.params.some((param) => previous.uses.params.has(param)) ||\n\t\t\t\t\tArray.from(previous.uses.dependencies).some((dep) => invalidated.some((fn) => fn(dep))) ||\n\t\t\t\t\t(previous.uses.parent && nodes_changed_since_last_render.includes(true));\n\t\t\t\tnodes_changed_since_last_render.push(changed_since_last_render);\n\t\t\t}\n\t\t}\n\n\t\t/** @type {import('./types').ServerDataPayload | null} */\n\t\tlet server_data_payload = null;\n\n\t\tif (route.uses_server_data) {\n\t\t\ttry {\n\t\t\t\tconst res = await native_fetch(\n\t\t\t\t\t`${url.pathname}${url.pathname.endsWith('/') ? '' : '/'}__data.json${url.search}`\n\t\t\t\t);\n\n\t\t\t\tserver_data_payload = /** @type {import('./types').ServerDataPayload} */ (await res.json());\n\n\t\t\t\tif (!res.ok) {\n\t\t\t\t\tthrow server_data_payload;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Error('TODO render fallback error page');\n\t\t\t}\n\n\t\t\tif (server_data_payload.type === 'redirect') {\n\t\t\t\treturn server_data_payload;\n\t\t\t}\n\t\t}\n\n\t\tconst server_data_nodes = server_data_payload?.nodes;\n\n\t\tconst branch_promises = nodes.map(async (loader, i) => {\n\t\t\treturn Promise.resolve().then(async () => {\n\t\t\t\tif (!loader) return;\n\t\t\t\tconst node = await loader();\n\n\t\t\t\t/** @type {import('./types').BranchNode | undefined} */\n\t\t\t\tconst previous = current.branch[i];\n\t\t\t\tconst changed_since_last_render =\n\t\t\t\t\tnodes_changed_since_last_render[i] || !previous || node !== previous.node;\n\n\t\t\t\tif (changed_since_last_render) {\n\t\t\t\t\tconst payload = server_data_nodes?.[i];\n\n\t\t\t\t\tif (payload?.status) {\n\t\t\t\t\t\tthrow error(payload.status, payload.message);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (payload?.error) {\n\t\t\t\t\t\tthrow payload.error;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn await load_node({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\trouteId: route.id,\n\t\t\t\t\t\tparent: async () => {\n\t\t\t\t\t\t\tconst data = {};\n\t\t\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\t\t\tObject.assign(data, (await branch_promises[j])?.data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tserver_data: payload?.data ?? null\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn previous;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// if we don't do this, rejections will be unhandled\n\t\tfor (const p of branch_promises) p.catch(() => {});\n\n\t\t/** @type {Array<import('./types').BranchNode | undefined>} */\n\t\tconst branch = [];\n\n\t\tfor (let i = 0; i < nodes.length; i += 1) {\n\t\t\tif (nodes[i]) {\n\t\t\t\ttry {\n\t\t\t\t\tbranch.push(await branch_promises[i]);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconst error = normalize_error(e);\n\n\t\t\t\t\tif (error instanceof Redirect) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttype: 'redirect',\n\t\t\t\t\t\t\tlocation: error.location\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tconst status = e instanceof HttpError ? e.status : 500;\n\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tif (errors[i]) {\n\t\t\t\t\t\t\t/** @type {import('./types').BranchNode | undefined} */\n\t\t\t\t\t\t\tlet error_loaded;\n\n\t\t\t\t\t\t\tlet j = i;\n\t\t\t\t\t\t\twhile (!branch[j]) j -= 1;\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\terror_loaded = {\n\t\t\t\t\t\t\t\t\tnode: await errors[i](),\n\t\t\t\t\t\t\t\t\tdata: {},\n\t\t\t\t\t\t\t\t\tuses: {\n\t\t\t\t\t\t\t\t\t\tparams: new Set(),\n\t\t\t\t\t\t\t\t\t\turl: false,\n\t\t\t\t\t\t\t\t\t\tdependencies: new Set(),\n\t\t\t\t\t\t\t\t\t\tparent: false\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\treturn await get_navigation_result_from_branch({\n\t\t\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\t\t\tbranch: branch.slice(0, j + 1).concat(error_loaded),\n\t\t\t\t\t\t\t\t\tstatus,\n\t\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\t\trouteId: route.id\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn await load_root_error_page({\n\t\t\t\t\t\tstatus,\n\t\t\t\t\t\terror,\n\t\t\t\t\t\turl,\n\t\t\t\t\t\trouteId: route.id\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// push an empty slot so we can rewind past gaps to the\n\t\t\t\t// layout that corresponds with an +error.svelte page\n\t\t\t\tbranch.push(undefined);\n\t\t\t}\n\t\t}\n\n\t\treturn await get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch,\n\t\t\tstatus: 200,\n\t\t\terror: null,\n\t\t\trouteId: route.id\n\t\t});\n\t}\n\n\t/**\n\t * @param {{\n\t *   status: number;\n\t *   error: HttpError | Error;\n\t *   url: URL;\n\t *   routeId: string | null\n\t * }} opts\n\t */\n\tasync function load_root_error_page({ status, error, url, routeId }) {\n\t\t/** @type {Record<string, string>} */\n\t\tconst params = {}; // error page does not have params\n\n\t\tconst root_layout = await load_node({\n\t\t\tnode: await default_layout,\n\t\t\turl,\n\t\t\tparams,\n\t\t\trouteId,\n\t\t\tparent: () => Promise.resolve({}),\n\t\t\tserver_data: null // TODO!!!!!\n\t\t});\n\n\t\tconst root_error = {\n\t\t\tnode: await default_error,\n\t\t\tdata: null,\n\t\t\t// TODO make this unnecessary\n\t\t\tuses: {\n\t\t\t\tparams: new Set(),\n\t\t\t\turl: false,\n\t\t\t\tdependencies: new Set(),\n\t\t\t\tparent: false\n\t\t\t}\n\t\t};\n\n\t\treturn await get_navigation_result_from_branch({\n\t\t\turl,\n\t\t\tparams,\n\t\t\tbranch: [root_layout, root_error],\n\t\t\tstatus,\n\t\t\terror,\n\t\t\trouteId\n\t\t});\n\t}\n\n\t/** @param {URL} url */\n\tfunction get_navigation_intent(url) {\n\t\tif (url.origin !== location.origin || !url.pathname.startsWith(base)) return;\n\n\t\tconst path = decodeURI(url.pathname.slice(base.length) || '/');\n\n\t\tfor (const route of routes) {\n\t\t\tconst params = route.exec(path);\n\n\t\t\tif (params) {\n\t\t\t\tconst normalized = new URL(\n\t\t\t\t\turl.origin + normalize_path(url.pathname, trailing_slash) + url.search + url.hash\n\t\t\t\t);\n\t\t\t\tconst id = normalized.pathname + normalized.search;\n\t\t\t\t/** @type {import('./types').NavigationIntent} */\n\t\t\t\tconst intent = { id, route, params: decode_params(params), url: normalized };\n\t\t\t\treturn intent;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {{\n\t *   url: URL;\n\t *   scroll: { x: number, y: number } | null;\n\t *   keepfocus: boolean;\n\t *   redirect_chain: string[];\n\t *   details: {\n\t *     replaceState: boolean;\n\t *     state: any;\n\t *   } | null;\n\t *   accepted: () => void;\n\t *   blocked: () => void;\n\t * }} opts\n\t */\n\tasync function navigate({ url, scroll, keepfocus, redirect_chain, details, accepted, blocked }) {\n\t\tconst from = current.url;\n\t\tlet should_block = false;\n\n\t\tconst navigation = {\n\t\t\tfrom,\n\t\t\tto: url,\n\t\t\tcancel: () => (should_block = true)\n\t\t};\n\n\t\tcallbacks.before_navigate.forEach((fn) => fn(navigation));\n\n\t\tif (should_block) {\n\t\t\tblocked();\n\t\t\treturn;\n\t\t}\n\n\t\tupdate_scroll_positions(current_history_index);\n\n\t\taccepted();\n\n\t\tif (started) {\n\t\t\tstores.navigating.set({\n\t\t\t\tfrom: current.url,\n\t\t\t\tto: url\n\t\t\t});\n\t\t}\n\n\t\tawait update(\n\t\t\turl,\n\t\t\tredirect_chain,\n\t\t\t{\n\t\t\t\tscroll,\n\t\t\t\tkeepfocus,\n\t\t\t\tdetails\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tconst navigation = { from, to: url };\n\t\t\t\tcallbacks.after_navigate.forEach((fn) => fn(navigation));\n\n\t\t\t\tstores.navigating.set(null);\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * Loads `href` the old-fashioned way, with a full page reload.\n\t * Returns a `Promise` that never resolves (to prevent any\n\t * subsequent work, e.g. history manipulation, from happening)\n\t * @param {URL} url\n\t */\n\tfunction native_navigation(url) {\n\t\tlocation.href = url.href;\n\t\treturn new Promise(() => {});\n\t}\n\n\tif (import.meta.hot) {\n\t\timport.meta.hot.on('vite:beforeUpdate', () => {\n\t\t\tif (current.error) location.reload();\n\t\t});\n\t}\n\n\treturn {\n\t\tafter_navigate: (fn) => {\n\t\t\tonMount(() => {\n\t\t\t\tcallbacks.after_navigate.push(fn);\n\n\t\t\t\treturn () => {\n\t\t\t\t\tconst i = callbacks.after_navigate.indexOf(fn);\n\t\t\t\t\tcallbacks.after_navigate.splice(i, 1);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\n\t\tbefore_navigate: (fn) => {\n\t\t\tonMount(() => {\n\t\t\t\tcallbacks.before_navigate.push(fn);\n\n\t\t\t\treturn () => {\n\t\t\t\t\tconst i = callbacks.before_navigate.indexOf(fn);\n\t\t\t\t\tcallbacks.before_navigate.splice(i, 1);\n\t\t\t\t};\n\t\t\t});\n\t\t},\n\n\t\tdisable_scroll_handling: () => {\n\t\t\tif (import.meta.env.DEV && started && !updating) {\n\t\t\t\tthrow new Error('Can only disable scroll handling during navigation');\n\t\t\t}\n\n\t\t\tif (updating || !started) {\n\t\t\t\tautoscroll = false;\n\t\t\t}\n\t\t},\n\n\t\tgoto: (href, opts = {}) => goto(href, opts, []),\n\n\t\tinvalidate: (resource) => {\n\t\t\tif (resource === undefined) {\n\t\t\t\t// Force rerun of all load functions, regardless of their dependencies\n\t\t\t\tfor (const node of current.branch) {\n\t\t\t\t\tnode?.uses.dependencies.add('');\n\t\t\t\t}\n\t\t\t\tinvalidated.push(() => true);\n\t\t\t} else if (typeof resource === 'function') {\n\t\t\t\tinvalidated.push(resource);\n\t\t\t} else {\n\t\t\t\tconst { href } = new URL(resource, location.href);\n\t\t\t\tinvalidated.push((dep) => dep === href);\n\t\t\t}\n\n\t\t\tif (!invalidating) {\n\t\t\t\tinvalidating = Promise.resolve().then(async () => {\n\t\t\t\t\tawait update(new URL(location.href), []);\n\n\t\t\t\t\tinvalidating = null;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn invalidating;\n\t\t},\n\n\t\tprefetch: async (href) => {\n\t\t\tconst url = new URL(href, get_base_uri(document));\n\t\t\tawait prefetch(url);\n\t\t},\n\n\t\t// TODO rethink this API\n\t\tprefetch_routes: async (pathnames) => {\n\t\t\tconst matching = pathnames\n\t\t\t\t? routes.filter((route) => pathnames.some((pathname) => route.exec(pathname)))\n\t\t\t\t: routes;\n\n\t\t\tconst promises = matching.map((r) => {\n\t\t\t\treturn Promise.all([...r.layouts, r.leaf].map((load) => load?.()));\n\t\t\t});\n\n\t\t\tawait Promise.all(promises);\n\t\t},\n\n\t\t_start_router: () => {\n\t\t\thistory.scrollRestoration = 'manual';\n\n\t\t\t// Adopted from Nuxt.js\n\t\t\t// Reset scrollRestoration to auto when leaving page, allowing page reload\n\t\t\t// and back-navigation from other pages to use the browser to restore the\n\t\t\t// scrolling position.\n\t\t\taddEventListener('beforeunload', (e) => {\n\t\t\t\tlet should_block = false;\n\n\t\t\t\tconst navigation = {\n\t\t\t\t\tfrom: current.url,\n\t\t\t\t\tto: null,\n\t\t\t\t\tcancel: () => (should_block = true)\n\t\t\t\t};\n\n\t\t\t\tcallbacks.before_navigate.forEach((fn) => fn(navigation));\n\n\t\t\t\tif (should_block) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.returnValue = '';\n\t\t\t\t} else {\n\t\t\t\t\thistory.scrollRestoration = 'auto';\n\t\t\t\t}\n\t\t\t});\n\n\t\t\taddEventListener('visibilitychange', () => {\n\t\t\t\tif (document.visibilityState === 'hidden') {\n\t\t\t\t\tupdate_scroll_positions(current_history_index);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsessionStorage[SCROLL_KEY] = JSON.stringify(scroll_positions);\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// do nothing\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t/** @param {Event} event */\n\t\t\tconst trigger_prefetch = (event) => {\n\t\t\t\tconst a = find_anchor(event);\n\t\t\t\tif (a && a.href && a.hasAttribute('sveltekit:prefetch')) {\n\t\t\t\t\tprefetch(get_href(a));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t/** @type {NodeJS.Timeout} */\n\t\t\tlet mousemove_timeout;\n\n\t\t\t/** @param {MouseEvent|TouchEvent} event */\n\t\t\tconst handle_mousemove = (event) => {\n\t\t\t\tclearTimeout(mousemove_timeout);\n\t\t\t\tmousemove_timeout = setTimeout(() => {\n\t\t\t\t\t// event.composedPath(), which is used in find_anchor, will be empty if the event is read in a timeout\n\t\t\t\t\t// add a layer of indirection to address that\n\t\t\t\t\tevent.target?.dispatchEvent(\n\t\t\t\t\t\tnew CustomEvent('sveltekit:trigger_prefetch', { bubbles: true })\n\t\t\t\t\t);\n\t\t\t\t}, 20);\n\t\t\t};\n\n\t\t\taddEventListener('touchstart', trigger_prefetch);\n\t\t\taddEventListener('mousemove', handle_mousemove);\n\t\t\taddEventListener('sveltekit:trigger_prefetch', trigger_prefetch);\n\n\t\t\t/** @param {MouseEvent} event */\n\t\t\taddEventListener('click', (event) => {\n\t\t\t\tif (!router_enabled) return;\n\n\t\t\t\t// Adapted from https://github.com/visionmedia/page.js\n\t\t\t\t// MIT license https://github.com/visionmedia/page.js#license\n\t\t\t\tif (event.button || event.which !== 1) return;\n\t\t\t\tif (event.metaKey || event.ctrlKey || event.shiftKey || event.altKey) return;\n\t\t\t\tif (event.defaultPrevented) return;\n\n\t\t\t\tconst a = find_anchor(event);\n\t\t\t\tif (!a) return;\n\n\t\t\t\tif (!a.href) return;\n\n\t\t\t\tconst is_svg_a_element = a instanceof SVGAElement;\n\t\t\t\tconst url = get_href(a);\n\n\t\t\t\t// Ignore non-HTTP URL protocols (e.g. `mailto:`, `tel:`, `myapp:`, etc.)\n\t\t\t\t// MEMO: Without this condition, firefox will open mailer twice.\n\t\t\t\t// See:\n\t\t\t\t// - https://github.com/sveltejs/kit/issues/4045\n\t\t\t\t// - https://github.com/sveltejs/kit/issues/5725\n\t\t\t\tif (!is_svg_a_element && !(url.protocol === 'https:' || url.protocol === 'http:')) return;\n\n\t\t\t\t// Ignore if tag has\n\t\t\t\t// 1. 'download' attribute\n\t\t\t\t// 2. 'rel' attribute includes external\n\t\t\t\tconst rel = (a.getAttribute('rel') || '').split(/\\s+/);\n\n\t\t\t\tif (\n\t\t\t\t\ta.hasAttribute('download') ||\n\t\t\t\t\trel.includes('external') ||\n\t\t\t\t\ta.hasAttribute('sveltekit:reload')\n\t\t\t\t) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Ignore if <a> has a target\n\t\t\t\tif (is_svg_a_element ? a.target.baseVal : a.target) return;\n\n\t\t\t\t// Check if new url only differs by hash and use the browser default behavior in that case\n\t\t\t\t// This will ensure the `hashchange` event is fired\n\t\t\t\t// Removing the hash does a full page navigation in the browser, so make sure a hash is present\n\t\t\t\tconst [base, hash] = url.href.split('#');\n\t\t\t\tif (hash !== undefined && base === location.href.split('#')[0]) {\n\t\t\t\t\t// set this flag to distinguish between navigations triggered by\n\t\t\t\t\t// clicking a hash link and those triggered by popstate\n\t\t\t\t\thash_navigating = true;\n\n\t\t\t\t\tupdate_scroll_positions(current_history_index);\n\n\t\t\t\t\tstores.page.set({ ...page, url });\n\t\t\t\t\tstores.page.notify();\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tnavigate({\n\t\t\t\t\turl,\n\t\t\t\t\tscroll: a.hasAttribute('sveltekit:noscroll') ? scroll_state() : null,\n\t\t\t\t\tkeepfocus: false,\n\t\t\t\t\tredirect_chain: [],\n\t\t\t\t\tdetails: {\n\t\t\t\t\t\tstate: {},\n\t\t\t\t\t\treplaceState: url.href === location.href\n\t\t\t\t\t},\n\t\t\t\t\taccepted: () => event.preventDefault(),\n\t\t\t\t\tblocked: () => event.preventDefault()\n\t\t\t\t});\n\t\t\t});\n\n\t\t\taddEventListener('popstate', (event) => {\n\t\t\t\tif (event.state && router_enabled) {\n\t\t\t\t\t// if a popstate-driven navigation is cancelled, we need to counteract it\n\t\t\t\t\t// with history.go, which means we end up back here, hence this check\n\t\t\t\t\tif (event.state[INDEX_KEY] === current_history_index) return;\n\n\t\t\t\t\tnavigate({\n\t\t\t\t\t\turl: new URL(location.href),\n\t\t\t\t\t\tscroll: scroll_positions[event.state[INDEX_KEY]],\n\t\t\t\t\t\tkeepfocus: false,\n\t\t\t\t\t\tredirect_chain: [],\n\t\t\t\t\t\tdetails: null,\n\t\t\t\t\t\taccepted: () => {\n\t\t\t\t\t\t\tcurrent_history_index = event.state[INDEX_KEY];\n\t\t\t\t\t\t},\n\t\t\t\t\t\tblocked: () => {\n\t\t\t\t\t\t\tconst delta = current_history_index - event.state[INDEX_KEY];\n\t\t\t\t\t\t\thistory.go(delta);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\taddEventListener('hashchange', () => {\n\t\t\t\t// if the hashchange happened as a result of clicking on a link,\n\t\t\t\t// we need to update history, otherwise we have to leave it alone\n\t\t\t\tif (hash_navigating) {\n\t\t\t\t\thash_navigating = false;\n\t\t\t\t\thistory.replaceState(\n\t\t\t\t\t\t{ ...history.state, [INDEX_KEY]: ++current_history_index },\n\t\t\t\t\t\t'',\n\t\t\t\t\t\tlocation.href\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// fix link[rel=icon], because browsers will occasionally try to load relative\n\t\t\t// URLs after a pushState/replaceState, resulting in a 404 — see\n\t\t\t// https://github.com/sveltejs/kit/issues/3748#issuecomment-1125980897\n\t\t\tfor (const link of document.querySelectorAll('link')) {\n\t\t\t\tif (link.rel === 'icon') link.href = link.href;\n\t\t\t}\n\n\t\t\taddEventListener('pageshow', (event) => {\n\t\t\t\t// If the user navigates to another site and then uses the back button and\n\t\t\t\t// bfcache hits, we need to set navigating to null, the site doesn't know\n\t\t\t\t// the navigation away from it was successful.\n\t\t\t\t// Info about bfcache here: https://web.dev/bfcache\n\t\t\t\tif (event.persisted) {\n\t\t\t\t\tstores.navigating.set(null);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\t_hydrate: async ({ status, error, node_ids, params, routeId }) => {\n\t\t\tconst url = new URL(location.href);\n\n\t\t\t/** @type {import('./types').NavigationFinished | undefined} */\n\t\t\tlet result;\n\n\t\t\ttry {\n\t\t\t\t/**\n\t\t\t\t * @param {string} type\n\t\t\t\t * @param {any} fallback\n\t\t\t\t */\n\t\t\t\tconst parse = (type, fallback) => {\n\t\t\t\t\tconst script = document.querySelector(`script[sveltekit\\\\:data-type=\"${type}\"]`);\n\t\t\t\t\treturn script?.textContent ? JSON.parse(script.textContent) : fallback;\n\t\t\t\t};\n\t\t\t\tconst server_data = parse('server_data', []);\n\t\t\t\tconst validation_errors = parse('validation_errors', undefined);\n\n\t\t\t\tconst branch_promises = node_ids.map(async (n, i) => {\n\t\t\t\t\treturn load_node({\n\t\t\t\t\t\tnode: await nodes[n](),\n\t\t\t\t\t\turl,\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\trouteId,\n\t\t\t\t\t\tparent: async () => {\n\t\t\t\t\t\t\tconst data = {};\n\t\t\t\t\t\t\tfor (let j = 0; j < i; j += 1) {\n\t\t\t\t\t\t\t\tObject.assign(data, (await branch_promises[j]).data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn data;\n\t\t\t\t\t\t},\n\t\t\t\t\t\tserver_data: server_data[i] ?? null\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tresult = await get_navigation_result_from_branch({\n\t\t\t\t\turl,\n\t\t\t\t\tparams,\n\t\t\t\t\tbranch: await Promise.all(branch_promises),\n\t\t\t\t\tstatus,\n\t\t\t\t\terror: /** @type {import('../server/page/types').SerializedHttpError} */ (error)\n\t\t\t\t\t\t?.__is_http_error\n\t\t\t\t\t\t? new HttpError(\n\t\t\t\t\t\t\t\t/** @type {import('../server/page/types').SerializedHttpError} */ (error).status,\n\t\t\t\t\t\t\t\terror.message\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: error,\n\t\t\t\t\tvalidation_errors,\n\t\t\t\t\trouteId\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tconst error = normalize_error(e);\n\n\t\t\t\tif (error instanceof Redirect) {\n\t\t\t\t\t// this is a real edge case — `load` would need to return\n\t\t\t\t\t// a redirect but only in the browser\n\t\t\t\t\tawait native_navigation(new URL(/** @type {Redirect} */ (e).location, location.href));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult = await load_root_error_page({\n\t\t\t\t\tstatus: error instanceof HttpError ? error.status : 500,\n\t\t\t\t\terror,\n\t\t\t\t\turl,\n\t\t\t\t\trouteId\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tinitialize(result);\n\t\t}\n\t};\n}\n","/** @type {App.PublicEnv} */\nexport let env = {};\n\n/** @type {(environment: Record<string, string>) => void} */\nexport function set_public_env(environment) {\n\tenv = environment;\n}\n","import { create_client } from './client.js';\nimport { init } from './singletons.js';\nimport { set_paths } from '../paths.js';\n\nexport { set_public_env } from '../env-public.js';\n\n/**\n * @param {{\n *   paths: {\n *     assets: string;\n *     base: string;\n *   },\n *   target: Element;\n *   route: boolean;\n *   spa: boolean;\n *   trailing_slash: import('types').TrailingSlash;\n *   hydrate: {\n *     status: number;\n *     error: Error | (import('../server/page/types').SerializedHttpError);\n *     node_ids: number[];\n *     params: Record<string, string>;\n *     routeId: string | null;\n *   };\n * }} opts\n */\nexport async function start({ paths, target, route, spa, trailing_slash, hydrate }) {\n\tconst client = create_client({\n\t\ttarget,\n\t\tbase: paths.base,\n\t\ttrailing_slash\n\t});\n\n\tinit({ client });\n\tset_paths(paths);\n\n\tif (hydrate) {\n\t\tawait client._hydrate(hydrate);\n\t}\n\n\tif (route) {\n\t\tif (spa) client.goto(location.href, { replaceState: true });\n\t\tclient._start_router();\n\t}\n\n\tdispatchEvent(new CustomEvent('sveltekit:start'));\n}\n"],"file":"_app/immutable/start-3945584a.js"}